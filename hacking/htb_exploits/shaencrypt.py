# Custom HTB box exploit
# output directed towards a file then grep to search
import hashlib
import base64

class HashProcessor:
    def __init__(self, algorithm_name='sha1'):
        self.set_algorithm(algorithm_name)

    def set_algorithm(self, algorithm_name):
        try:
            self.hash_algorithm = getattr(hashlib, algorithm_name)
        except AttributeError:
            raise ValueError(f"Invalid algorithm name: {algorithm_name}")

    def hash_with_salt(self, input_string, salt):
        # Combine the salt with the input string
        salted_input = salt + input_string

        # Create a new hash object
        hash_obj = self.hash_algorithm()

        # Update the hash object with the bytes of the salted input string
        hash_obj.update(salted_input.encode())

        # Return the hash value as a byte object
        return hash_obj.digest()

# Main execution
def main():
    algorithm = 'sha1'
    salt = 'd'

    hasher = HashProcessor(algorithm)

    with open("/opt/wordlists/rockyou.txt", "r", encoding="latin-1", errors='ignore') as file:
        for line in file:
            password = line.strip()  # Remove any leading/trailing whitespace
            hash_value = hasher.hash_with_salt(password, salt)
            print(f"The {algorithm.upper()} hash of '{password}' with salt '{salt}' is: {base64.urlsafe_b64encode(hash_value).decode('utf-8').replace('+', '.')}")

if __name__ == "__main__":
    main()